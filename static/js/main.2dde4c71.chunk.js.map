{"version":3,"sources":["duck/app/types.ts","duck/app/reducers.ts","duck/reducers.ts","page/components/gantt/gantt.tsx","page/containers/gantt/gantt.tsx","duck/app/actions.ts","app.tsx","helper/constant/routes.ts","root.tsx","index.tsx"],"names":["ActionTypes","initialState","injects","ganttState","startAt","Date","endAt","works","workId","Guid","create","toString","workName","userName","terms","changeTerm","state","action","type","displayStart","moment","positionStart","width","positionEnd","daysForStartPosition","Math","floor","daysForEndPosition","clone","add","work","find","w","toDate","console","log","format","newWorks","map","appReducer","history","createBrowserHistory","combineReducer","combineReducers","router","connectRouter","app","getHeaderDaysCells","cols","d","push","key","className","getTableWidth","columnWidth","diff","getPositionX","targetDay","startDay","getTermWidth","connect","dispatch","undefined","daysGroupWidth","daysGropuStyle","tableWidthStyle","TASK_COLUMN_WIDTH","onResizeStop","e","direction","ref","delta","position","getAttribute","parseInt","x","style","onDragStop","data","target","node","parentNode","Error","window","getComputedStyle","DOMMatrix","webkitTransform","m41","i","data-work-id","default","y","height","dragAxis","enableResizing","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","bounds","resizeGrid","dragGrid","minWidth","App","withRouter","path","component","GanttContainer","exact","from","to","pathname","Root","store","container","document","getElementById","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","routerMiddleware","thunk","ReactDOM"],"mappings":"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","file":"static/js/main.2dde4c71.chunk.js","sourcesContent":["import {CreatorsToActions} from '../../helper/util/types';\n\nimport * as actionCreators from './actions';\n\nexport const ActionTypes = {\n  CHANGE_TERM: 'app/CHANGE_TERM'\n} as const;\n\nexport type AppActions = CreatorsToActions<typeof actionCreators>;\n\nexport interface App {\n  ganttState?: GanttState;\n  works: Work[];\n}\n\nexport interface Work {\n  workId: string;\n  workName: string;\n  userName: string;\n  terms: Term[];\n}\n\nexport interface Term {\n  startAt: Date;\n  endAt: Date;\n}\n\nexport interface GanttState {\n  startAt: Date;\n  endAt: Date;\n}\n","import {Guid} from 'guid-typescript';\nimport moment from 'moment';\n\nimport {RootState} from '../types';\nimport {ActionTypes, AppActions, Work} from './types';\n\nconst initialState: (\n  injects?: Partial<RootState.AppState>\n) => RootState.AppState = injects => {\n  return {\n    ganttState: {\n      startAt: new Date('2020-07-01'),\n      endAt: new Date('2020-07-31')\n    },\n    works: works,\n    ...injects\n  };\n};\n\nconst works: Work[] = [\n  {\n    workId: Guid.create().toString(),\n    workName: '工程１',\n    userName: '担当者１',\n    terms: [{startAt: new Date('2020-07-01'), endAt: new Date('2020-07-05')}]\n  },\n  {\n    workId: Guid.create().toString(),\n    workName: '工程２',\n    userName: '担当者２',\n    terms: [{startAt: new Date('2020-07-06'), endAt: new Date('2020-07-10')}]\n  },\n  {\n    workId: Guid.create().toString(),\n    workName: '工程３',\n    userName: '担当者３',\n    terms: [{startAt: new Date('2020-07-11'), endAt: new Date('2020-07-15')}]\n  },\n  {\n    workId: Guid.create().toString(),\n    workName: '工程４',\n    userName: '担当者４',\n    terms: [{startAt: new Date('2020-07-16'), endAt: new Date('2020-07-20')}]\n  },\n  {\n    workId: Guid.create().toString(),\n    workName: '工程５',\n    userName: '担当者５',\n    terms: [{startAt: new Date('2020-07-21'), endAt: new Date('2020-07-25')}]\n  }\n];\n\nconst appReducer = (\n  state: RootState.AppState = initialState(),\n  action: AppActions\n): RootState.AppState => {\n  switch (action.type) {\n    case ActionTypes.CHANGE_TERM:\n      return changeTerm(state, action);\n    default:\n      // const _: never = action;\n      return state;\n  }\n};\n\nconst changeTerm = (\n  state: RootState.AppState = initialState(),\n  action: AppActions\n): RootState.AppState => {\n  if (action.type !== ActionTypes.CHANGE_TERM) {\n    return state;\n  }\n\n  const displayStart = moment(state.ganttState.startAt);\n  const workId = action.workId;\n  const positionStart = action.positionStart;\n  const width = action.width;\n  const positionEnd = positionStart + width;\n\n  const daysForStartPosition = Math.floor(positionStart / 25);\n  const daysForEndPosition = Math.floor(positionEnd / 25) - 1;\n\n  const startAt = displayStart.clone().add(daysForStartPosition, 'd');\n  const endAt = displayStart.clone().add(daysForEndPosition, 'd');\n\n  const work = state.works.find(w => w.workId === workId);\n  work.terms[0].startAt = startAt.toDate();\n  work.terms[0].endAt = endAt.toDate();\n  console.log({\n    positionStart,\n    startAt: moment(work.terms[0].startAt).format('yyyy/MM/DD'),\n    endAt: moment(work.terms[0].endAt).format('yyyy/MM/DD')\n  });\n\n  const newWorks = state.works.map(w => (w.workId === workId ? work : w));\n  return {\n    ...state,\n    works: newWorks\n  };\n};\n\nexport {initialState};\n\nexport default appReducer;\n","import {connectRouter} from 'connected-react-router';\nimport {createBrowserHistory} from 'history';\nimport {combineReducers} from 'redux';\n\nimport appReducer from './app/reducers';\nimport {Actions, RootState} from './types';\n\nexport const history = createBrowserHistory();\n\nconst combineReducer = combineReducers<RootState, Actions>({\n  router: connectRouter(history),\n  app: appReducer\n});\n\nexport const rootReducer = (state: RootState | undefined, action: Actions) => {\n  return combineReducer(state, action);\n};\n","import './gantt.scss';\n\nimport moment from 'moment';\nimport React from 'react';\nimport {Rnd} from 'react-rnd';\n\nimport {GanttState, Work} from '../../../duck/app/types';\n\nexport interface GanttProps {\n  ganttState?: GanttState;\n  works: Work[];\n  changeTerm?: (workId: string, positionStart: number, width: number) => void;\n}\n\nconst BASE_COLUMN_WIDTH = 25;\nconst TASK_COLUMN_WIDTH = 150;\nconst START_AT_COLUMN_WIDTH = 100;\nconst END_AT_COLUMN_WIDTH = 100;\n\nexport const GanttComponent: React.FC<GanttProps> = ({\n  ganttState = undefined,\n  works = [],\n  changeTerm = () => undefined\n}) => {\n  if (ganttState === undefined) {\n    return <></>;\n  }\n\n  const daysGroupWidth = getTableWidth(BASE_COLUMN_WIDTH, ganttState);\n  const daysGropuStyle = {width: daysGroupWidth};\n  const tableWidth =\n    TASK_COLUMN_WIDTH +\n    START_AT_COLUMN_WIDTH +\n    END_AT_COLUMN_WIDTH +\n    daysGroupWidth;\n  const tableWidthStyle = {width: tableWidth};\n\n  const onResizeStop = (e, direction, ref, delta, position) => {\n    // ここで返せるのは\n    // workId、開始位置、長さ、終了位置（開始位置＋長さ）\n    // 変更後の開始日、終了日は上記の値とカラムのサイズから算出する\n    const workId = ref.getAttribute('data-work-id') as string;\n    const positionStart = parseInt(position.x, 10);\n    const width = parseInt(ref.style.width, 10);\n    changeTerm(workId, positionStart, width);\n  };\n\n  const onDragStop = (e, data) => {\n    // ここで返せるのは\n    // workId、開始位置、長さ、終了位置（開始位置＋長さ）\n    // 変更後の開始日、終了日は上記の値とカラムのサイズから算出する\n    const target = data.node;\n    const workId = target.getAttribute('data-work-id') as string;\n    if (workId == null) {\n      console.log('----- onDrag でエラー -----');\n      console.log(target);\n      console.log(target.parentNode);\n      if (e.target.parentNode) {\n        console.log(target.parentNode.parentNode);\n      }\n      throw new Error('onDrag でエラー');\n    }\n    const style = window.getComputedStyle(target);\n    const matrix = new DOMMatrix(style.webkitTransform);\n    const positionStart = matrix.m41;\n    const width = parseInt(target.style.width);\n    changeTerm(workId, positionStart, width);\n  };\n\n  return (\n    <div className=\"table\" style={tableWidthStyle}>\n      <div className=\"table-header\">\n        <div className=\"task\">タスク</div>\n        <div className=\"start-at\">開始日</div>\n        <div className=\"end-at\">終了日</div>\n        <div className=\"table-header-days\" style={daysGropuStyle}>\n          {getHeaderDaysCells(ganttState)}\n        </div>\n      </div>\n      <div className=\"table-body\">\n        {works.map((work, i) => {\n          return (\n            <div className=\"table-body-inner\">\n              <div className=\"task\">{work.workName}</div>\n              <div className=\"table-body-row-wrapper\">\n                <div className=\"start-at\">\n                  {moment(work.terms[0].startAt).format('yyyy.MM.DD')}\n                </div>\n                <div className=\"end-at\">\n                  {moment(work.terms[0].endAt).format('yyyy.MM.DD')}\n                </div>\n                <div\n                  key={work.workId}\n                  className=\"table-body-row\"\n                  style={daysGropuStyle}\n                >\n                  <Rnd\n                    className=\"rnd\"\n                    data-work-id={work.workId}\n                    default={{\n                      x: getPositionX(\n                        BASE_COLUMN_WIDTH,\n                        work.terms[0].startAt,\n                        ganttState.startAt\n                      ),\n                      y: 10,\n                      width: getTermWidth(\n                        BASE_COLUMN_WIDTH,\n                        work.terms[0].startAt,\n                        work.terms[0].endAt\n                      ),\n                      height: 25\n                    }}\n                    dragAxis=\"x\"\n                    enableResizing={{\n                      top: false,\n                      right: true,\n                      bottom: false,\n                      left: true,\n                      topRight: false,\n                      bottomRight: false,\n                      bottomLeft: false,\n                      topLeft: false\n                    }}\n                    bounds=\"parent\"\n                    resizeGrid={[BASE_COLUMN_WIDTH, 0]}\n                    dragGrid={[BASE_COLUMN_WIDTH, 0]}\n                    minWidth={BASE_COLUMN_WIDTH}\n                    onDragStop={onDragStop}\n                    onResizeStop={onResizeStop}\n                  ></Rnd>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst getHeaderDaysCells = (ganttState: GanttState) => {\n  const cols: JSX.Element[] = [];\n  const startAt = moment(ganttState.startAt);\n  const endAt = moment(ganttState.endAt);\n  for (let d = startAt; d <= endAt; d = d.add(1, 'd')) {\n    cols.push(\n      <div key={d.format('yyMMDD')} className=\"table-header-column\">\n        <div>{d.format('D')}</div>\n        <div>{d.format('dd')}</div>\n      </div>\n    );\n  }\n  return cols;\n};\n\nconst getTableWidth = (columnWidth: number, ganttState: GanttState) => {\n  const days = moment(ganttState.endAt).diff(ganttState.startAt, 'd') + 1;\n  return columnWidth * days;\n};\n\nconst getPositionX = (columnWidth: number, targetDay: Date, startDay) => {\n  const days = moment(targetDay).diff(startDay, 'd');\n  return columnWidth * days;\n};\n\nconst getTermWidth = (columnWidth: number, startAt: Date, endAt: Date) => {\n  const days = moment(endAt).diff(startAt, 'd') + 1;\n  return columnWidth * days;\n};\n","import {connect} from 'react-redux';\nimport {Dispatch} from 'redux';\n\nimport {changeTerm} from '../../../duck/app/actions';\nimport {GanttState, Work} from '../../../duck/app/types';\nimport {RootState} from '../../../duck/types';\nimport {GanttComponent} from '../../components/gantt/gantt';\n\ninterface StateProps {\n  ganttState?: GanttState;\n  works: Work[];\n}\n\ninterface DispatchProps {\n  changeTerm: (workId: string, positionStart: number, width: number) => void;\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  ganttState: state.app.ganttState,\n  works: state.app.works\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  changeTerm: (workId, positionStart, width) =>\n    dispatch(changeTerm(workId, positionStart, width))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GanttComponent);\n","import {ActionTypes} from './types';\n\nexport const changeTerm = (\n  workId: string,\n  positionStart: number,\n  width: number\n) => ({\n  type: ActionTypes.CHANGE_TERM,\n  workId,\n  positionStart,\n  width\n});\n","import React from 'react';\nimport {\n  Redirect,\n  Route,\n  RouteComponentProps,\n  Switch,\n  withRouter\n} from 'react-router-dom';\n\nimport {ROOT_ROUTE} from './helper/constant/routes';\nimport GanttContainer from './page/containers/gantt/gantt';\n\nconst AppComponent: React.FC<RouteComponentProps> = () => {\n  return (\n    <Switch>\n      <Route path={ROOT_ROUTE} component={GanttContainer} exact />\n      <Redirect exact from=\"/*\" to={{pathname: ROOT_ROUTE}} />\n    </Switch>\n  );\n};\n\nexport const App = withRouter(AppComponent);\n","export const ROOT_ROUTE = '/';\n","import { ConnectedRouter } from \"connected-react-router\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./app\";\nimport { history } from \"./duck/reducers\";\nimport { ReduxStoreInstance } from \"./duck/types\";\n\nexport const Root: React.FC<{\n  store: ReduxStoreInstance;\n}> = ({ store }) => {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  );\n};\n","import { routerMiddleware } from \"connected-react-router\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { history, rootReducer } from \"./duck/reducers\";\nimport \"./index.css\";\nimport { Root } from \"./root\";\n\nconst container: HTMLElement = document.getElementById(\"root\")!;\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(routerMiddleware(history), thunk))\n);\n\nReactDOM.render(<Root store={store} />, container);\n"],"sourceRoot":""}